// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SmokingData.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "SmokingData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SmokingDataRoot

@implementation SmokingDataRoot

@end

#pragma mark - SmokingDataRoot_FileDescriptor

static GPBFileDescriptor *SmokingDataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SmokingDataMessage

@implementation SmokingDataMessage

@dynamic smokingId;
@dynamic userId;
@dynamic smokingDt;
@dynamic hourIndex;
@dynamic dayIndex;
@dynamic monthIndex;
@dynamic yearIndex;
@dynamic numberOfPuffs;
@dynamic longitude;
@dynamic latitude;
@dynamic address;
@dynamic workMode;
@dynamic powerTemp;
@dynamic smokingTime;
@dynamic battery;
@dynamic resistanceValue;

typedef struct SmokingDataMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t hourIndex;
  int32_t dayIndex;
  int32_t monthIndex;
  int32_t yearIndex;
  int32_t numberOfPuffs;
  int32_t workMode;
  int32_t powerTemp;
  int32_t smokingTime;
  int32_t battery;
  int32_t resistanceValue;
  NSString *address;
  int64_t smokingId;
  int64_t userId;
  int64_t smokingDt;
  double longitude;
  double latitude;
} SmokingDataMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "smokingId",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_SmokingId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, smokingId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "smokingDt",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_SmokingDt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, smokingDt),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hourIndex",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_HourIndex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, hourIndex),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dayIndex",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_DayIndex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, dayIndex),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "monthIndex",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_MonthIndex,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, monthIndex),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "yearIndex",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_YearIndex,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, yearIndex),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "numberOfPuffs",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_NumberOfPuffs,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, numberOfPuffs),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_Longitude,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_Latitude,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_Address,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "workMode",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_WorkMode,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, workMode),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "powerTemp",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_PowerTemp,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, powerTemp),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "smokingTime",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_SmokingTime,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, smokingTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "battery",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_Battery,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, battery),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "resistanceValue",
        .dataTypeSpecific.className = NULL,
        .number = SmokingDataMessage_FieldNumber_ResistanceValue,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(SmokingDataMessage__storage_, resistanceValue),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SmokingDataMessage class]
                                     rootClass:[SmokingDataRoot class]
                                          file:SmokingDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SmokingDataMessage__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\014\001\t\000\002\006\000\003\t\000\004\t\000\005\010\000\006\n\000\007\t\000\010\r\000\014\010\000\r\t\000\016\013\000\020\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
