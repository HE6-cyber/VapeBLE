// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SmokingLocationData.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "SmokingLocationData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SmokingLocationDataRoot

@implementation SmokingLocationDataRoot

@end

#pragma mark - SmokingLocationDataRoot_FileDescriptor

static GPBFileDescriptor *SmokingLocationDataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SmokingLocationDataMessage

@implementation SmokingLocationDataMessage

@dynamic smokingId;
@dynamic userId;
@dynamic smokingDt;
@dynamic longitude;
@dynamic latitude;
@dynamic address;
@dynamic workMode;
@dynamic powerTemp;
@dynamic smokingTime;
@dynamic battery;
@dynamic resistanceValue;

typedef struct SmokingLocationDataMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t workMode;
  int32_t powerTemp;
  int32_t smokingTime;
  int32_t battery;
  int32_t resistanceValue;
  NSString *address;
  int64_t smokingId;
  int64_t userId;
  int64_t smokingDt;
  double longitude;
  double latitude;
} SmokingLocationDataMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "smokingId",
        .dataTypeSpecific.className = NULL,
        .number = SmokingLocationDataMessage_FieldNumber_SmokingId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SmokingLocationDataMessage__storage_, smokingId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = SmokingLocationDataMessage_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SmokingLocationDataMessage__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "smokingDt",
        .dataTypeSpecific.className = NULL,
        .number = SmokingLocationDataMessage_FieldNumber_SmokingDt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SmokingLocationDataMessage__storage_, smokingDt),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = SmokingLocationDataMessage_FieldNumber_Longitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SmokingLocationDataMessage__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = SmokingLocationDataMessage_FieldNumber_Latitude,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SmokingLocationDataMessage__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = SmokingLocationDataMessage_FieldNumber_Address,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SmokingLocationDataMessage__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "workMode",
        .dataTypeSpecific.className = NULL,
        .number = SmokingLocationDataMessage_FieldNumber_WorkMode,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SmokingLocationDataMessage__storage_, workMode),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "powerTemp",
        .dataTypeSpecific.className = NULL,
        .number = SmokingLocationDataMessage_FieldNumber_PowerTemp,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SmokingLocationDataMessage__storage_, powerTemp),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "smokingTime",
        .dataTypeSpecific.className = NULL,
        .number = SmokingLocationDataMessage_FieldNumber_SmokingTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SmokingLocationDataMessage__storage_, smokingTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "battery",
        .dataTypeSpecific.className = NULL,
        .number = SmokingLocationDataMessage_FieldNumber_Battery,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SmokingLocationDataMessage__storage_, battery),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "resistanceValue",
        .dataTypeSpecific.className = NULL,
        .number = SmokingLocationDataMessage_FieldNumber_ResistanceValue,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SmokingLocationDataMessage__storage_, resistanceValue),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SmokingLocationDataMessage class]
                                     rootClass:[SmokingLocationDataRoot class]
                                          file:SmokingLocationDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SmokingLocationDataMessage__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\t\000\002\006\000\003\t\000\007\010\000\010\t\000\t\013\000\013\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
