// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HeartRateData.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "HeartRateData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - HeartRateDataRoot

@implementation HeartRateDataRoot

@end

#pragma mark - HeartRateDataRoot_FileDescriptor

static GPBFileDescriptor *HeartRateDataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - HeartRateDataMessage

@implementation HeartRateDataMessage

@dynamic heartRateId;
@dynamic userId;
@dynamic heartRateDt;
@dynamic heartRate;
@dynamic bloodOxygen;

typedef struct HeartRateDataMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t heartRate;
  int32_t bloodOxygen;
  int64_t heartRateId;
  int64_t userId;
  int64_t heartRateDt;
} HeartRateDataMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "heartRateId",
        .dataTypeSpecific.className = NULL,
        .number = HeartRateDataMessage_FieldNumber_HeartRateId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HeartRateDataMessage__storage_, heartRateId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = HeartRateDataMessage_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HeartRateDataMessage__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "heartRateDt",
        .dataTypeSpecific.className = NULL,
        .number = HeartRateDataMessage_FieldNumber_HeartRateDt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HeartRateDataMessage__storage_, heartRateDt),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "heartRate",
        .dataTypeSpecific.className = NULL,
        .number = HeartRateDataMessage_FieldNumber_HeartRate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HeartRateDataMessage__storage_, heartRate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bloodOxygen",
        .dataTypeSpecific.className = NULL,
        .number = HeartRateDataMessage_FieldNumber_BloodOxygen,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(HeartRateDataMessage__storage_, bloodOxygen),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HeartRateDataMessage class]
                                     rootClass:[HeartRateDataRoot class]
                                          file:HeartRateDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HeartRateDataMessage__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\013\000\002\006\000\003\013\000\004\t\000\005\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
